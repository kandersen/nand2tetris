// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15],out=isAInst);
    Or(a=instruction[15],b=false,out=isCInst);
    Or16(a=false,b=instruction,
      out[0]=j3,
      out[1]=j2,
      out[2]=j1,
      out[3]=d3,
      out[4]=d2,
      out[5]=d1,
      out[6]=c6,
      out[7]=c5,
      out[8]=c4,
      out[9]=c3,
      out[10]=c2,
      out[11]=c1,
      out[12]=a);

    Mux16(a=instruction,b=outALU,sel=isCInst,out=intoA);

    And(a=isCInst,b=d1,out=writeAc);
    Or(a=isAInst,b=writeAc,out=writeA);
    ARegister(in=intoA,load=writeA,out=outRegA,out[0..14]=addressM);
    And(a=isCInst,b=d2,out=writeD);
    DRegister(in=outALU,load=writeD,out=outRegD);
    And(a=isCInst,b=d3,out=writeM);

    Mux16(a=outRegA,b=inM,sel=a,out=outAM);

    ALU(zx=c1,nx=c2,zy=c3,ny=c4,f=c5,no=c6,x=outRegD,y=outAM,zr=zr,ng=ng,out=outM,out=outALU); 
    Or(a=ng,b=zr,out=notPos);
    Not(in=notPos,out=ps);
    
    And(a=j1,b=ng,out=jmpLT);
    And(a=j2,b=zr,out=jmpEQ);
    And(a=j3,b=ps,out=jmpGE);
    Or(a=jmpLT,b=jmpEQ,out=jmpTmp);
    Or(a=jmpTmp,b=jmpGE,out=tryJump);
    And(a=isCInst,b=tryJump,out=jmp);

    Nand(a=isCInst,b=tryJump,out=inc);

    PC(in=outRegA,inc=inc,load=jmp,reset=reset,out[0..14]=pc); // IN in[16],load,inc,reset; OUT out[16];

}